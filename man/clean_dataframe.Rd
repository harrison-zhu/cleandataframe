% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cleandataframe.R
\name{clean_dataframe}
\alias{clean_dataframe}
\title{Clean and Validate a Data Frame}
\usage{
clean_dataframe(
  df,
  colname_case_style = NULL,
  colname_pattern = NULL,
  rowname_case_style = NULL,
  rowname_pattern = NULL,
  clean_columns = TRUE,
  clean_columns_args = list(),
  check_column = FALSE,
  column_operation = "keep",
  check_records = FALSE,
  record_operation = "keep",
  replace_whitespace = TRUE
)
}
\arguments{
\item{df}{data.frame or tibble. The input data frame to clean.}

\item{colname_case_style}{character. Case style for column names (e.g., "snake", "lower", etc.). Default is NULL (no change).}

\item{colname_pattern}{character. Regex pattern for column names. Default is NULL (no check).}

\item{rowname_case_style}{character. Case style for row names. Default is NULL (no change).}

\item{rowname_pattern}{character. Regex pattern for row names. Default is NULL (no check).}

\item{clean_columns}{logical. Whether to clean columns using clean_vector(). Default is TRUE.}

\item{clean_columns_args}{list. Additional arguments passed to clean_vector() for columns. Default is list().}

\item{check_column}{logical. Whether to check and operate on columns. Default is FALSE.}

\item{column_operation}{character. Vector of operations for columns: "keep", "remove_empty", "remove_duplicates", "replace_duplicates", "remove_no_name", "replace_no_name". Default is "keep".}

\item{check_records}{logical. Whether to check and operate on records (rows). Default is FALSE.}

\item{record_operation}{character. Vector of operations for records: "keep", "remove_empty", "remove_duplicates", "replace_duplicates", "remove_no_name", "replace_no_name". Default is "keep".}

\item{replace_whitespace}{logical. Whether to replace whitespace with NA or not. Default is \code{TRUE}.}
}
\value{
A cleaned data.frame or tibble.
}
\description{
Cleans and validates a data.frame or tibble according to user-specified rules for column names, row names, columns, and records.
This function can:
\itemize{
\item Check if the data.frame is empty.
\item Validate and optionally format column names (case style, regex pattern).
\item Validate and optionally format row names (if present).
\item Clean and validate each column using \code{clean_vector()}.
\item Optionally check and operate on records (rows), e.g., remove duplicates or empty rows.
}
}
\examples{
# Example: Converts the column titles of the data frame to the correct case,
# converts each column to be characters, and replaces empty and duplicate
# values in each column with NA.
test_df <- data.frame(
  Name = c("Alice Smith", "bob jones", "Alice Smith", "", NA),
  Age = c(30, 25, 30, NA, 40),
  stringsAsFactors = FALSE
)
clean_dataframe(
  test_df,
  colname_case_style = "snake",
  clean_columns_args = list(
    class_convert = "character",
    duplicate_operation = "replace",
    validate_non_duplicate_value = TRUE,
    empty_operation = "replace",
    validate_nonempty_value = TRUE
  )
)

# Example: Converts the column titles to be uppercase and checks that the names are
# only letters. Removes any duplicate columns with matching titles and values.
duplicate_df <- data.frame(
  a = c("Alice", "Bob", "Cole", "Damien"),
  b = c(10, 20, 30, 40),
  c = c("orange", "purple", "yellow", "red"),
  d = c("Alice", "Billy", "Collin", "Dan"),
  e = c(10, 20, 30, 40)
)

# Change the column names to create duplicates for the test.
names(duplicate_df)[4] <- "a"
names(duplicate_df)[5] <- "b"

clean_dataframe(
  duplicate_df,
  colname_case_style = "upper_lower",
  colname_pattern = "^[A-Za-z]+$",
  check_column = TRUE,
  column_operation = "remove_duplicates"
)

# Example: A data frame containing duplicate and empty entries is given.
# Column names are changed to be in uppercase before removing duplicates
# and empty records from the data frame.

record_df <- data.frame(
  fruit = c("apple", "banana", "strawberry", NA, "orange", "pear", "apple"),
  color = c("red", "yellow", "red", NA, "orange", "green", "red"),
  count = c(3, 2, 10, NA, 3, 4, 3)
)

clean_dataframe(
  record_df,
  colname_case_style = "upper_lower",
  check_records = TRUE,
  record_operation = c("remove_duplicates", "remove_empty")
)

}
