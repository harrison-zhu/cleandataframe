% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cleanvector.R
\name{clean_vector}
\alias{clean_vector}
\title{Clean and Validate a Vector}
\usage{
clean_vector(
  vector,
  assert_stop = FALSE,
  class_required = NULL,
  class_convert = NULL,
  custom_transform_function = NULL,
  encode_required = NULL,
  encode_convert = NULL,
  from_encode = "",
  validate_format = FALSE,
  convert_format = FALSE,
  format_pattern = NULL,
  format_case_style = NULL,
  format_decimal_digits = NULL,
  format_require_integer = NULL,
  format_date_format = NULL,
  check_typo = FALSE,
  correct_typo = FALSE,
  correct_spelling = NULL,
  sep_in = "[^\\\\p{L}\\\\p{N}]",
  squeeze_continuous_sep_in = TRUE,
  remove_initial_and_end_sep_in = TRUE,
  sep_out = "_",
  typo_operation = "replace",
  validate_non_duplicate_value = FALSE,
  duplicate_operation = "keep",
  validate_nonempty_value = FALSE,
  empty_operation = "keep",
  ignore_na = TRUE,
  na_value = NA,
  ...
)
}
\arguments{
\item{vector}{A vector to be cleaned and validated.}

\item{assert_stop}{logical. Throws an error if \code{TRUE} when an assertion returns \code{FALSE}. Otherwise, pastes a message and continues.}

\item{class_required}{character. The required class for the vector if it needs to be checked (e.g., "character", "numeric"). Default is \code{NULL} for no validation done.}

\item{class_convert}{character. Which class to convert the vector to. Default is \code{NULL} for no class conversion.}

\item{custom_transform_function}{A custom function to transform the vector to the required class. Default is \code{NULL}.}

\item{encode_required}{character. The required encoding (e.g., "UTF-8", "latin1"). Default is \code{NULL} for no encoding check.}

\item{encode_convert}{character. Which encoding to convert the vector to. Default is \code{NULL} for no encoding conversion.}

\item{from_encode}{character. The encoding to convert from. Default is \code{"UTF-8"}.}

\item{validate_format}{logical. Whether to validate the format of the vector (e.g., regex for character, decimal digits for numeric, date format for dates). Default is \code{FALSE}.}

\item{convert_format}{logical. Whether to convert the format to the vector to the specified parameters. Default is \code{FALSE}.}

\item{format_pattern}{character. Regular expression pattern to match for character/factor vectors. Default is \code{NULL}.}

\item{format_case_style}{character. String specifying the case style to enforce or convert to (e.g., "lower", "upper", "title", "snake", etc.). Default is \code{NULL}.}

\item{format_decimal_digits}{integer. Number of decimal digits required for numeric vectors. Default is \code{NULL}.}

\item{format_require_integer}{logical. If \code{TRUE}, require integer values for numeric vectors. Default is \code{NULL}.}

\item{format_date_format}{character string specifying the date format for date/time vectors. Default is \code{NULL}.}

\item{check_typo}{logical. Whether to check for typos in character/factor vectors. Default is \code{TRUE}.}

\item{correct_typo}{logical. Whether to correct typos if found. Default is \code{FALSE}.}

\item{correct_spelling}{character. A vector containing a list of valid spellings for the vector. Default is \code{NULL}.}

\item{sep_in}{character. Regular expression for splitting words when converting case style. Default is \code{"[^\\p{L}\\]{N}]"}.}

\item{squeeze_continuous_sep_in}{logical. Whether to squeeze multiple consecutive separators in \code{sep_in} to a single separator. Default is \code{TRUE}.}

\item{remove_initial_and_end_sep_in}{logical. Whether to remove separators at the start or end of the string when converting case style. Default is \code{TRUE}.}

\item{sep_out}{character. Separator to use when joining words after case conversion. Default is \code{"_"}.}

\item{typo_operation}{character. Operation to perform if typos are found. One of \code{"keep"}, \code{"remove"}, \code{"replace"}, or \code{"error"}. Default is \code{"keep"}.}

\item{validate_non_duplicate_value}{logical. Whether to check for duplicate values. Default is \code{TRUE}.}

\item{duplicate_operation}{character. Operation to perform if duplicates are found. One of \code{"keep"}, \code{"keep_first"}, \code{"keep_last"}, \code{"replace"}, or \code{"error"}. Default is \code{"keep"}.}

\item{validate_nonempty_value}{logical. Whether to check for empty values (\code{NA} or \code{""}). Default is \code{TRUE}.}

\item{empty_operation}{character. Operation to perform if empty values are found. One of \code{"keep"}, \code{"remove"}, \code{"replace"}, or \code{"error"}. Default is \code{"keep"}.}

\item{ignore_na}{logical. For character/factor vectors, whether to ignore NA values. Default is \code{TRUE}.}

\item{na_value}{character. Value to use for replacement of non-matching or failed conversions. Default is \code{NA}.}

\item{...}{Additional arguments passed to \code{assert_format} and \code{convert_format}.}
}
\value{
The cleaned and validated vector, with class, encoding, duplicates, empty values, and format handled as specified.
}
\description{
Cleans and validates a vector according to user-specified rules for class, encoding, duplicates, empty values, and format.
This function can:
\itemize{
\item Validate and optionally convert the class of the vector.
\item Validate and optionally convert the encoding of the vector (for character vectors).
\item Check for and handle duplicate values according to the specified operation.
\item Check for and handle empty values (\code{NA} or \code{""}) according to the specified operation.
\item check for and optionally correct typos.
\item Validate and optionally convert the format of the vector (e.g., regex pattern, case style, decimal digits, or date format).
}
}
\examples{
# Checks if the vector is a character vector, and shows an error if it is not.
\dontrun{
assert_error <- c(1, 2, 3)
clean_vector(assert_error, assert_stop = TRUE)
}

# Remove duplicates and empty values from a character vector
x <- c("a", "b", "a", "", NA, "c")
clean_vector(
  x,
  class_required = "character",
  validate_non_duplicate_value = TRUE,
  duplicate_operation = "keep_first",
  validate_nonempty_value = TRUE,
  empty_operation = "remove"
)

# Convert numeric vector to character and replace duplicates with NA
y <- c(1, 2, 2, 3)
clean_vector(
  y,
  class_convert = "character",
  validate_non_duplicate_value = TRUE,
  duplicate_operation = "replace"
)

# Error if empty values are present
z <- c("foo", "", "bar")
\dontrun{
clean_vector(z, class_required = "character", empty_operation = "error")
}

# Validate and convert format (e.g., enforce lower case and pattern)
w <- c("Abc", "def", "GHI")
clean_vector(
  w,
  class_required = "character",
  validate_format = TRUE,
  convert_format = TRUE,
  format_case_style = "lower_upper",
  format_pattern = "^[a-z]+$"
)

# Check if a vector is of the character class,
# replace typos and remove empty values.
typo_check <- c("apple", "ap pl", "appl", NA, "applr", "appe", "banana", "bananana", NA, "", "apple", "\n")
clean_vector(
  vector = typo_check,
  class_required = "character",
  validate_nonempty_value = TRUE,
  empty_operation = "remove",
  validate_non_duplicate_value = TRUE,
  duplicate_operation = "keep",
  check_typo = TRUE, correct_typo = TRUE,
  validate_format = TRUE,
  format_pattern = "a|b"
)

# Check if a vector is of the character class, and attempt to convert
# it to the correct regex pattern and replacing with a custom NA value.
# Then remove duplicates, including the custom NA value.
convert_format_check <- c("apple", "bee", "crab", "apple", "a1b2", "dune", "eel2")
clean_vector(
  vector = convert_format_check,
  class_required = "character",
  convert_format = TRUE,
  format_pattern = "^[a-z]+$",
  validate_non_duplicate_value = TRUE,
  duplicate_operation = "keep_first",
  na_value = "na"
)
}
