% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cleanvector.R
\name{assert_format}
\alias{assert_format}
\title{Assert that a vector matches a specific format, case style, or date/time format.}
\usage{
assert_format(
  vector,
  regex_pattern = NULL,
  ignore_na = TRUE,
  case_style = NULL,
  decimal_digits = NULL,
  require_integer = NULL,
  date_format = NULL,
  na_value = NA,
  ...
)
}
\arguments{
\item{vector}{The vector to check for formatting.}

\item{regex_pattern}{character. A regular expression pattern (character string starting with "^" or ending with "$") to match for character/factor vectors.}

\item{ignore_na}{logical. For character/factor vectors, whether to ignore NA values when checking the format. Default is TRUE.}

\item{case_style}{character. A cinteger.ase style supported by snakecase::to_any_case (e.g., "snake", "small_camel", etc.) for character/factor vectors.}

\item{decimal_digits}{integer. For numeric vectors, an integer specifying the required number of decimal digits.}

\item{require_integer}{logical. For numeric vectors, whether to require all elements to be whole numbers.}

\item{date_format}{character. For Date or POSIXt vectors, a format string as in \code{format.Date} or \code{format.POSIXct} to check string representation.}

\item{na_value}{character. For character/factor vectors, a value to replace NA values with. Default is NA.}

\item{...}{list. Additional arguments passed to snakecase::to_any_case if used.}
}
\value{
logical. TRUE if all elements match the format, otherwise FALSE.
}
\description{
Checks whether every element in the vector matches the specific format, styling, and other parameters.
For character or factor vectors, checks if all elements match a specified pattern or case style
(e.g., "snake", "small_camel", "big_camel", etc. as supported by snakecase::to_any_case).
For numeric vectors, checks if all elements match a decimal digit requirement (e.g., number of decimal places).
For Date, POSIXct, or POSIXlt vectors, checks if all elements match a specified date/time format.
}
\examples{
assert_format(c("my_var", "another_var"), case_style = "snake")
assert_format(c("myVar", "anotherVar"), regex_pattern = "^[A-Za-z]*$", case_style = "small_camel")
assert_format(c(1.23, 4.56), decimal_digits = 2)
assert_format(c(1, 2, 3), require_integer = TRUE)
assert_format(c("foo", "bar"), regex_pattern = "^f")
assert_format(c("foo", "fall", NA), regex_pattern = "^f", ignore_na = FALSE)
assert_format(c("foo", "fall", "na"), regex_pattern = "^f", na_value = "na")
assert_format(as.Date(c("2020-01-01", "2020-01-02")), date_format = "\%Y-\%m-\%d")
assert_format(as.POSIXct(c("2020-01-01 12:00:00", "2020-01-02 13:00:00")), date_format = "\%Y-\%m-\%d \%H:\%M:\%S")
}
