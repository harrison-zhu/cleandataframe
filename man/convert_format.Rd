% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cleanvector.R
\name{convert_format}
\alias{convert_format}
\title{Convert a vector to a required format}
\usage{
convert_format(
  vector,
  regex_pattern = NULL,
  ignore_na = TRUE,
  case_style = NULL,
  sep_in = "[^\\\\p{L}\\\\]{N}]",
  sep_out = "_",
  decimal_digits = NULL,
  require_integer = NULL,
  date_format = NULL,
  na_value = NA,
  ...
)
}
\arguments{
\item{vector}{A vector to be converted.}

\item{regex_pattern}{character. Regular expression pattern to match for character/factor vectors. Default is \code{NULL}.}

\item{ignore_na}{logical. For character/factor vectors, whether to ignore NA values when checking and altering the format. Default is TRUE.}

\item{case_style}{character. Case style to convert to ("lower", "upper", "title", etc.) for character/factor vectors. Default is \code{NULL}.}

\item{sep_in}{character. Regular expression for input word separation (used with case_style). Default is \code{"[^[:alnum:]]"}.}

\item{sep_out}{character. Separator to use for output (used with case_style). Default is \code{"_"}.}

\item{decimal_digits}{integer. Number of decimal digits required for numeric vectors. Default is \code{NULL}.}

\item{require_integer}{logical. If \code{TRUE}, require integer values for numeric vectors. Default is \code{NULL}.}

\item{date_format}{character. Date format string for date/time vectors. Default is \code{NULL}.}

\item{na_value}{character. Value to use for replacement of non-matching or failed conversions of character vector. Default is \code{NA}.}

\item{...}{Additional arguments (currently ignored).}
}
\value{
The converted vector if conversion is possible; otherwise, an error is thrown.
}
\description{
Attempts to convert a vector to match a specified format, such as a regular expression pattern for character/factor vectors,
integer or decimal requirements for numeric vectors, or a date format for date/time vectors.
If the conversion fail or is unable to finish, an error will be thrown instead.
}
\examples{
# Character pattern conversion
convert_format(c("abc", "123", "a1b2"), regex_pattern = "^[a-z]+$")
convert_format(c("abc", "123", "a1b2"), regex_pattern = "^[a-z]+$", na_value = "NA")

# Throw an error if conversion is not possible when NA is present and not ignored.
\dontrun{
 convert_format(c("abc", "a1b2", "123"), regex_pattern = "^[a-z]+$", ignore_na = FALSE)
 convert_format(c("abc", "def", NA), regex_pattern = "^[a-z]+$", ignore_na = FALSE)
}

# Character case style conversion
convert_format(c("abc", "DEF", "Ghi"), case_style = "upper_lower")

# Numeric to integer conversion
convert_format(c(1, 2, 3), require_integer = TRUE)

# Numeric rounding to decimal digits
convert_format(c(1.234, 2.345), decimal_digits = 2)

# Date format conversion
convert_format(as.Date(c("2020-01-01", "2020-02-01")), date_format = "\%Y-\%m-\%d")
}
